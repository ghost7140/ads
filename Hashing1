#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

typedef struct {
    int key;
} HashEntry;

typedef struct {
    HashEntry* table;
    int size;
} HashTable;

HashTable* createHashTable(int size) {
    HashTable* hashTable = (HashTable*) malloc(sizeof(HashTable));
    hashTable->size = size;
    hashTable->table = (HashEntry*) calloc(size, sizeof(HashEntry));
    return hashTable;
}

int h1(int key, int size) {
    return key % size;
}

int h2(int key) {
    return 7 - (key % 7);
}

int doubleHashing(int key, int size, int j) {
    return (h1(key, size) + j * h2(key)) % size;
}

void insert(HashTable* hashTable, int key) {
    int j = 0;
    int index = doubleHashing(key, hashTable->size, j);
    while (hashTable->table[index].key != 0) {
        j++;
        index = doubleHashing(key, hashTable->size, j);
    }
    hashTable->table[index].key = key;
}

void display(HashTable* hashTable) {
    for (int i = 0; i < hashTable->size; i++) {
        printf("index %d value = %d\n", i, hashTable->table[i].key);
    }
}

int main() {
    int n;
    scanf("%d", &n);
    HashTable* hashTable = createHashTable(n);
    for (int i = 0; i < n; i++) {
        int key;
        scanf("%d", &key);
        insert(hashTable, key);
    }
    display(hashTable);
    return 0;
}
