#include <stdio.h>
#include <limits.h>
#define INF INT_MAX
int minDistance(int dist[], int visited[], int n) {
 int min = INF, min_index = -1;
 for (int v = 0; v < n; v++) {
 if (!visited[v] && dist[v] <= min) {
 min = dist[v];
 min_index = v;
 }
 }
 return min_index;
}
void dijkstra(int graph[100][100], int src, int n) {
 int dist[n]; 
 int visited[n]; 
 for (int i = 0; i < n; i++) {
 dist[i] = INF;
 visited[i] = 0;
 }
 dist[src] = 0;
 for (int count = 0; count < n - 1; count++) {
 int u = minDistance(dist, visited, n);
 if (u == -1) break; 
 visited[u] = 1;
 for (int v = 0; v < n; v++) {
 if (!visited[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
 dist[v] = dist[u] + graph[u][v];
 }
 }
 }
 for (int i = 0; i < n; i++) {
 if (dist[i] == INF)
 printf("INF "); 
 else
 printf("%d ", dist[i]);}
 printf("\n");
}
int main() {
 int n, src;
 printf("Enter the number of nodes: ");
 scanf("%d", &n);
 int graph[100][100]; 
 printf("Enter the adjacency matrix (%d x %d):\n", n, n);
 for (int i = 0; i < n; i++) {
 for (int j = 0; j < n; j++) {
 scanf("%d", &graph[i][j]);
 }
 }
 printf("Enter the source node: ");
 scanf("%d", &src);
 dijkstra(graph, src, n);
 return 0;
}
