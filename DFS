#include<stdio.h>
#include<stdlib.h>
#define MAX 100
typedef struct Node{
    int vertex;
    struct Node* next;
}Node;
Node* adj[MAX];
int visited[MAX];
Node* createNode(int vertex){
    Node* newNode=(Node*)malloc(sizeof(Node));
    newNode->vertex=vertex;
    newNode->next=NULL;
    return newNode;
}
void addEdge(int from,int to){
    Node* newNode=createNode(to);
    newNode->next=adj[from];
    adj[from]=newNode;
}
void sortAdjacencyList(int n){
    for(int i=0;i<n;i++){
        int count=0;
        Node* temp=adj[i];
        while(temp!=NULL){
            count++;
            temp=temp->next;
        }
        int* neighbors =(int*)malloc(count * sizeof(int));
        temp=adj[i];
        for(int j=0;j<count;j++){
            neighbors[j]=temp->vertex;
            temp=temp->next;
        }
        for(int j=0;j<count-1;j++){
            for(int k=j+1;k<count;k++){
                if(neighbors[j]>neighbors[k]){
                    int temp=neighbors[j];
                    neighbors[j]=neighbors[k];
                    neighbors[k]=temp;
                }
            }
        }
        adj[i]=NULL;
        for(int j=count-1;j>=0;j--){
            addEdge(i,neighbors[j]);
        }
        free(neighbors);
    }
}
void dfs(int v){
    visited[v]=1;
    printf("%d ",v);
    Node* temp=adj[v];
    while(temp!=NULL){
        int adjVertex=temp->vertex;
        if(!visited[adjVertex]){
            dfs(adjVertex);
        }
        temp=temp->next;
    }
}
int main(){
    int n,edges;
    scanf("%d",&n);
    scanf("%d",&edges);
    for(int i=0;i<n;i++){
        adj[i]=NULL;
        visited[i]=0;
    }
    for(int i=0;i<edges;i++){
        int from,to;
        scanf("%d %d", &from,&to);
        addEdge(from,to);
    }
    for(int i=0;i<n;i++){
        visited[i]=0;
    }
    sortAdjacencyList(n);
    dfs(0);
    return 0;
}
